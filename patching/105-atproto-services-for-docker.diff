diff --git a/services/bsky/api.js b/services/bsky/api.js
index e14b43f2d..528d588bd 100644
--- a/services/bsky/api.js
+++ b/services/bsky/api.js
@@ -43,25 +43,114 @@
 const assert = require('node:assert')
 const cluster = require('cluster')
 const { Secp256k1Keypair } = require('@atproto/crypto')
-const { ServerConfig, BskyAppView } = require('@atproto/bsky')
+const { IdResolver, MemoryCache } = require('@atproto/identity')
+const bsky = require('@atproto/bsky') // import all bsky features

-const main = async () => {
+const appview = async () => {
   const env = getEnv()
-  const config = ServerConfig.readEnv()
+  const config = bsky.ServerConfig.readEnv()
   assert(env.serviceSigningKey, 'must set BSKY_SERVICE_SIGNING_KEY')
   const signingKey = await Secp256k1Keypair.import(env.serviceSigningKey)
-  const bsky = BskyAppView.create({ config, signingKey })
-  await bsky.start()
+
+  // starts: involve logics in packages/dev-env/src/bsky.ts >>>>>>>>>>>>>
+  // Separate migration db in case migration changes some connection state that we need in the tests, e.g. "alter database ... set ..."
+  const migrationDb = new bsky.Database({
+    url: env.dbPostgresUrl,
+    schema: env.dbPostgresSchema,
+  })
+  if (env.migration) {
+    await migrationDb.migrateToOrThrow(env.migration)
+  } else {
+    await migrationDb.migrateToLatestOrThrow()
+  }
+  await migrationDb.close()
+
+  const db = new bsky.Database({
+    url: env.dbPostgresUrl,
+    schema: env.dbPostgresSchema,
+    poolSize: 2000,
+  })
+
+  // ends: involve logics in packages/dev-env/src/bsky.ts   <<<<<<<<<<<<<
+
+  const server = bsky.BskyAppView.create({ config, signingKey })
+  await server.start()
   // Graceful shutdown (see also https://aws.amazon.com/blogs/containers/graceful-shutdowns-with-ecs/)
   const shutdown = async () => {
-    await bsky.destroy()
+    await server.destroy()
+    await db.close()
   }
   process.on('SIGTERM', shutdown)
   process.on('disconnect', shutdown) // when clustering
 }

+const dataplane = async () => {
+  const env = getEnv()
+  const config = bsky.ServerConfig.readEnv()
+  assert(env.serviceSigningKey, 'must set BSKY_SERVICE_SIGNING_KEY')
+  const signingKey = await Secp256k1Keypair.import(env.serviceSigningKey)
+
+  const db = new bsky.Database({
+    url: env.dbPostgresUrl,
+    schema: env.dbPostgresSchema,
+    poolSize: 2000,
+  })
+
+  const dataplane = await bsky.DataPlaneServer.create(
+    db,
+    env.dataplanePort,
+    config.didPlcUrl,
+  )
+
+  const bsync = await bsky.MockBsync.create(db, env.bsyncPort)
+
+  const server = await bsky.DataPlaneServer.create({ signingKey, dataplane })
+  // Graceful shutdown (see also https://aws.amazon.com/blogs/containers/graceful-shutdowns-with-ecs/)
+  const shutdown = async () => {
+    await server.destroy()
+    await bsync.destroy()
+    await db.close()
+  }
+  process.on('SIGTERM', shutdown)
+  process.on('disconnect', shutdown) // when clustering
+}
+
+const subscribe = async () => {
+  const env = getEnv()
+  const config = bsky.ServerConfig.readEnv()
+
+  const db = new bsky.Database({
+    url: env.dbPostgresUrl,
+    schema: env.dbPostgresSchema,
+    poolSize: 4000,
+  })
+
+  const idResolver = new IdResolver({
+    plcUrl: config.didPlcUrl,
+    didCache: new MemoryCache(),
+  })
+
+  const sub = new bsky.RepoSubscription({
+    service: env.repoProvider,
+    db,
+    idResolver: idResolver,
+    background: new bsky.BackgroundQueue(db),
+  })
+
+  sub.start()
+
+  process.on('SIGTERM', sub.destroy)
+  process.on('disconnect', sub.destroy)
+}
+
 const getEnv = () => ({
   serviceSigningKey: process.env.BSKY_SERVICE_SIGNING_KEY || undefined,
+  dbPostgresUrl: process.env.BSKY_DB_POSTGRES_URL || undefined,
+  dbPostgresSchema: process.env.BSKY_DB_POSTGRES_SCHEMA || undefined,
+  dataplanePort: maybeParseInt(process.env.BSKY_DATAPLANE_PORT) || undefined,
+  bsyncPort: maybeParseInt(process.env.BSKY_BSYNC_PORT) || undefined,
+  migration: process.env.ENABLE_MIGRATIONS === 'true' || undefined,
+  repoProvider: process.env.BSKY_REPO_PROVIDER || undefined,
 })

 const maybeParseInt = (str) => {
@@ -107,10 +196,15 @@
       console.log('disconnecting workers')
       workers.forEach((w) => w.disconnect())
     })
+
+    dataplane()
+    subscribe()
   } else {
     console.log(`worker ${process.pid} is running`)
-    main()
+    appview()
   }
 } else {
-  main() // non-clustering
+  dataplane()
+  subscribe()
+  appview() // non-clustering
 }
